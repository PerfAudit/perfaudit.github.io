<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PerfAudit | Performance Audit of Websites by Professionals</title>
    <description>Performance Audit of Websites by Professionals. Run Jank Free and Performant Web Applications care free.</description>
    <link>http://perfaudit.com/</link>
    <atom:link href="http://perfaudit.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Mar 2015 02:40:47 +0530</pubDate>
    <lastBuildDate>Tue, 24 Mar 2015 02:40:47 +0530</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Case Study | DeviantArt.com | PerfAudit</title>
        <description>&lt;p&gt;Hey folks! Today we have come up with the case study for &lt;a href=&quot;http://www.deviantart.com/&quot; target=&quot;_blank&quot;&gt;DeviantArt.com&lt;/a&gt;, the largest online social network for artists and art enthusiasts, and a platform for emerging and established artists to exhibit, promote, and share their works with an enthusiastic, art-centric community.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/deviantart.com/homepage.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is among the top 100 of all trafficked websites on the Internet. They have over 32 million registered members and attract over 65 million unique visitors per month. Their members upload over 160,000 original art works every day, everything from painting and sculpture to digital art, pixel art, films, and anime.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.alexa.com/siteinfo/deviantart.com&quot; target=&quot;_blank&quot; title=&quot;DeviantArt Alexa Rank&quot;&gt;&lt;img src=&quot;/images/case-study/deviantart.com/alexa-ranking.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;live-auditing&quot;&gt;Live auditing&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/ukNmA2LhIi4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-fast-does-deviantartcom-load-on-average&quot;&gt;How fast does deviantart.com load on average?&lt;/h2&gt;

&lt;h4 id=&quot;very-very-slow-around-46382-seconds-when-we-loaded18-seconds-on-average-66-of-sites-are-faster-as-per-data-from-alexa&quot;&gt;Very Very Slow around 46.382 seconds when we loaded(1.8 seconds on average), 66% of sites are faster (as per data from Alexa).&lt;/h4&gt;

&lt;h2 id=&quot;network-profiling&quot;&gt;Network profiling&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?url=www.deviantart.com&amp;amp;tab=mobile&quot; target=&quot;_blank&quot; title=&quot;DeviantArt desktop improvements&quot;&gt;&lt;img src=&quot;/images/case-study/deviantart.com/pagespeed-score-desktop.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desktop pagespeed score for DeviantArt is just 24, which specifies a tremendous scope for improvement. DeviantArt displays paintings, sculpture to digital art, pixel art, films, and anime i.e. it is a image heavy website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/deviantart.com/content-breakdown.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thus maximum compression, suitable resizing and caching of image resources should be their primary action, which is verified by PageSpeed’s recommendation which says:&lt;/p&gt;

&lt;h3 id=&quot;optimize-the-following-images-to-reduce-their-size-by-27mb-48-reduction&quot;&gt;Optimize the following images to reduce their size by 2.7MB (48% reduction).&lt;/h3&gt;

&lt;p&gt;2.7MB of size reduction just through compression and resizing of static images must be tackled on priority.&lt;/p&gt;

&lt;p&gt;Resizing and Compression of images are among the redundant tasks that must be performed either in batch, or as soon as an image is uploaded by the user on DeviantArt.&lt;/p&gt;

&lt;p&gt;Follow this &lt;a href=&quot;http://addyosmani.com/blog/image-optimization-tools/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; by Addy Osmani, describing the available Image Optimization Tools.&lt;/p&gt;

&lt;h3 id=&quot;reduce-server-response-time&quot;&gt;Reduce server response time&lt;/h3&gt;

&lt;p&gt;PageSpeed insights also suggests to reduce the server response time, which is currently more than 1.5 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/deviantart.com/deviantart-server-response-time.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Understanding the processing time of 1.5+ seconds taken by the server can be attributed to a heavy processing getting triggered on every request to Homepage. It can also be scaling issue, amounted by the traffic at dispense, thus a solution for reducing the server side response time can only be suggested appropriately after understanding the architecture of DeviantArt. Though the generic solutions used by businesses to resolve this issue are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Caching the entire HTML generated for specific requests(especially for homepages) for X minutes, so as to completely eliminate any server side processing in that duration of time.&lt;/li&gt;
  &lt;li&gt;Adding Cache layers at multiple points where processing / retreival of data is involved via external services / dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reduce-first-pixel-render-time&quot;&gt;Reduce First Pixel Render Time&lt;/h3&gt;

&lt;p&gt;First pixel render time as recorded by us is around 6.29 seconds, which is huge. Eliminating render-blocking JavaScript and CSS in the above fold content which currently includes 9 CSS files, will surely help to reduce the first pixel render time drastically. Furthermore, the critical CSS can then be calculated and added in the HEAD section, which is not present currently.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.webpagetest.org/video/compare.php?tests=150315_36_FKK-r:1-c:0&quot; target=&quot;_blank&quot; title=&quot;Filmstrip view DeviantArt page performance&quot;&gt;&lt;img src=&quot;/images/case-study/deviantart.com/filmstrip-view.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first critical issue describes the reason for the increased first pixel render time, rendering is quite slow and it takes about 5.5 second to get the first glimpse of readable content, though the first pixel render time is about 3 seconds.&lt;/p&gt;

&lt;h3 id=&quot;mobile-specific-issues&quot;&gt;Mobile Specific Issues&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?url=www.deviantart.com&amp;amp;tab=mobile&quot; target=&quot;_blank&quot; title=&quot;DeviantArt mobile improvements&quot;&gt;&lt;img src=&quot;/images/case-study/deviantart.com/pagespeed-score-mobile.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compression and Resizing of images is again highlighted in the page speed issues, which has already been discussed in the issues listed above.&lt;/p&gt;

&lt;p&gt;Other necessary optimizations possible for DeviantArt.com:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make fewer HTTP requests, use concatentation of static resources&lt;/li&gt;
  &lt;li&gt;Leverage browser caching of static resources with appropriate response headers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;profiling-rendering-performance&quot;&gt;Profiling Rendering Performance&lt;/h2&gt;

&lt;h3 id=&quot;sticky-header&quot;&gt;Sticky header&lt;/h3&gt;

&lt;p&gt;The first thing we saw while browsing this website was huge jank while scrolling - much more than we have seen in our &lt;a href=&quot;http://perfaudit.com/case-study/caniuse.com/&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://perfaudit.com/case-study/hindustantimes.com/&quot;&gt;case studies&lt;/a&gt;. Profiling the page scroll in Chrome devtool timeline, we noticed the sticky header on the website. Come on…this got to be the most popular rendering issue on the web!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/deviantart.com/bad-paints.png&quot; alt=&quot;Bad paints&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As in previous case studies, this can be simply fixed using the &lt;code&gt;transform: translateZ(0)&lt;/code&gt; hack.&lt;/p&gt;

&lt;h3 id=&quot;animated-gifs&quot;&gt;Animated GIFs&lt;/h3&gt;

&lt;p&gt;To verify that no more unnecessary paints were happening, we switched on the &lt;strong&gt;Show paint rectangles&lt;/strong&gt; option in the &lt;strong&gt;Rendering&lt;/strong&gt; tab. Here is something strange on their page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/deviantart.com/animated-gifs.png&quot; alt=&quot;Animated gifs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The green paint rectangle seen above basically shows up every second! Yes, even when you are not interacting with the page. But why? Looking closely revealed small animated GIFs in that green area. GIFs are animated, they need to be repainted for every frame, sure. But why such a big paint rectangle? This is again a result of &lt;a href=&quot;http://benfrain.com/improving-css-performance-fixed-position-elements/&quot;&gt;&lt;em&gt;union of damaged regions&lt;/em&gt;&lt;/a&gt;. If you notice, they are 4 GIFs in the 4 corners of the green rectangle. Yes, the paint rectangles of the four images got unioned and hence, a big paint rectangle.&lt;/p&gt;

&lt;p&gt;Now we could promote every GIF to its own layer to avoid union of paint rectangles and that actually helps in lowering down the paint area as seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/deviantart.com/better-paints.png&quot; alt=&quot;Better paints&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we still saw few paint spikes here and there which were mainly due to &lt;strong&gt;Composite Layers&lt;/strong&gt; event. There are around 20 such GIFs on this page and taking every GIF to its own layer is probably causing too much texture transfer from CPU to GPU as GIF need to painted with different texture every frame. We are not very clear on how this can be resolved further. But we guess its a tradeoff one needs to consider according to the scenario at hand. We would like to hear suggestions on what can be done to improve this further.&lt;/p&gt;

&lt;p&gt;That is it for deviant.com from our side. Till next perf study!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2015 07:25:40 +0530</pubDate>
        <link>http://perfaudit.com/case-study/deviantart.com</link>
        <guid isPermaLink="true">http://perfaudit.com/case-study/deviantart.com</guid>
        
        
        <category>case-study</category>
        
      </item>
    
      <item>
        <title>Case Study | HindustanTimes.com | PerfAudit</title>
        <description>&lt;p&gt;Hey folks! Today we have come up with the case study for &lt;a href=&quot;http://www.hindustantimes.com/&quot; target=&quot;_blank&quot;&gt;HindustanTimes.com&lt;/a&gt; which represents the web version of &lt;a href=&quot;http://en.wikipedia.org/wiki/Hindustan_Times&quot;&gt;HT Media&lt;/a&gt;, one of India’s biggest media companies across states and media platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.alexa.com/siteinfo/hindustantimes.com&quot; target=&quot;_blank&quot; title=&quot;Hindustan Times Alexa Rank&quot;&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/alexa-ranking.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;live-auditing&quot;&gt;Live auditing&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/eyg5ePH8opM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-fast-does-hindustantimescom-load-on-average&quot;&gt;How fast does hindustantimes.com load on average?&lt;/h2&gt;

&lt;h4 id=&quot;very-slow-around-137-seconds-when-we-loaded4578-seconds-on-average-95-of-sites-are-faster-as-per-data-from-alexa&quot;&gt;Very Slow around 13.7 seconds when we loaded(4.578 Seconds on average), 95% of sites are faster (as per data from Alexa).&lt;/h4&gt;

&lt;h2 id=&quot;network-profiling&quot;&gt;Network profiling&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?url=www.hindustantimes.com&amp;amp;tab=mobile&quot; target=&quot;_blank&quot; title=&quot;Hindustan Times desktop improvements&quot;&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/pagespeed-score-desktop.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desktop pagespeed score for HindustanTimes is just 59, which specifies a lot of scope for improvement. As Hindustan Times is a media organization, I expect a lot of images to be a part of their content, thus maximum compression and caching of image resources should be their primary concern. Also, they are not using Webp image format, which can effectively help in reducing their images’ size.&lt;/p&gt;

&lt;p&gt;Minification and Compression are the redundant tasks that one must integrate in their deployment process, as they significantly contribute in decreasing the asset size and page load time of a webpage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?url=www.hindustantimes.com&amp;amp;tab=mobile&quot; target=&quot;_blank&quot; title=&quot;Hindustan Times mobile improvements&quot;&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/pagespeed-score-mobile.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first critical issue describes the reason for the increased first pixel render time, rendering is quite slow and it takes about 5.5 second to get the first glimpse of readable content, though the first pixel render time is about 3 seconds. Here’s the filmstrip view for HindustanTimes.com’s pageload:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.webpagetest.org/video/compare.php?tests=150310_6M_P7P-r:1-c:0&quot; target=&quot;_blank&quot; title=&quot;Filmstrip view Hindustan Times page performance&quot;&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/filmstrip-view.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To resolve the above mentioned issue, as described in the pagespeed insights, one must avoid to have render blocking JS and CSS inside &amp;lt;head&amp;gt; tag. As mentioned above in desktop optimizations, caching, compression and minification must be handled at all times, and must be made a part of the deployment process.&lt;/p&gt;

&lt;p&gt;Other necessary optimizations possible for HindustanTimes.com:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make fewer HTTP requests, use concatentation of static resources&lt;/li&gt;
  &lt;li&gt;Use mulitple domain names for parallel resource requests.&lt;/li&gt;
  &lt;li&gt;Compress static resources. Must read &lt;a href=&quot;https://engineering.linkedin.com/shared-dictionary-compression-http-linkedin&quot;&gt;post&lt;/a&gt; by Linkedin Engineering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;profiling-rendering-performance&quot;&gt;Profiling Rendering Performance&lt;/h2&gt;

&lt;p&gt;When scrolling down the page down over sections that we have not viewed before, we experienced frequent jerks.&lt;/p&gt;

&lt;p&gt;A quick profiling in the Chrome devtool timeline showed us this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/timeline-graph.png&quot; alt=&quot;timeline graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above graph we get to know that 2 things are responsible for the visible jank: script and paint, the latter having more effect. Let us tackle paint first.&lt;/p&gt;

&lt;p&gt;Looking at the paint events in the timeline it is evident that the complete page is getting painted for some reason.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/fixed-position-repaints.png&quot; alt=&quot;complete page paint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the sections highlighted in the above image. Those are the elements which are fixed positioned in the website. So we get our paint issue:
1. Fixed positioned elements are repainted continously as they are constantly visible.
2. Moreover, as all fixed elements are on same layer, the paint rectangle would be union of those individual element rectangles. And that becomes almost the complete page in our case, &lt;a href=&quot;http://benfrain.com/improving-css-performance-fixed-position-elements/&quot;&gt;causing a full page repaint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Solution (hack) here is to just give those fixed positioned elements their own composite layer which actually prevents fixed positioned elements from repainting. One way to do that is by following CSS:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
.some-fixed-element {
	position: fixed;
	transform: translateZ(0);
}
&lt;/pre&gt;

&lt;p&gt;Rerun the timeline recording:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/repaints-removed.png&quot; alt=&quot;repaints-removed&quot; /&gt;
And voila! No more repaint spikes in the timeline.&lt;/p&gt;

&lt;p&gt;Now over to the second reason of overshooting our frame limit: scripts. Inspecting of an seemingly heavy script execution event shows that it is happening on &lt;code&gt;scroll&lt;/code&gt; event - as expected. Digging deep, we find that its actually jQuery that is causing the issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/script-inspection.png&quot; alt=&quot;long-script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Devtools timeline tells us the exact line in the script which caused the execution time. Putting a breakpoint on that line reveals that their is actually a jQuery plugin being used to pin elements on the website and it performs some checks during the &lt;code&gt;scroll&lt;/code&gt; event to do so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/case-study/hindustantimes.com/script-issue-plugin.png&quot; alt=&quot;long-script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case, their isn’t a straightforward solution. The plugin’s implementation will have to be tweaked to make it more performant.&lt;/p&gt;

&lt;p&gt;That is it for this audit. If you want us to audit any specific website, do let us know in the comments or on &lt;a href=&quot;https://twitter.com/perfaudit&quot;&gt;twitter&lt;/a&gt;. We’ll definitely try to take it up as our next case study.&lt;/p&gt;

&lt;p&gt;Do not forget to follow us for more such perfy performace audits.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2015 07:25:40 +0530</pubDate>
        <link>http://perfaudit.com/case-study/hindustantimes.com</link>
        <guid isPermaLink="true">http://perfaudit.com/case-study/hindustantimes.com</guid>
        
        
        <category>case-study</category>
        
      </item>
    
      <item>
        <title>We are ON</title>
        <description>&lt;p&gt;Hello from Perfaudit!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/evolution-web.jpg&quot; alt=&quot;Evolution of the Web&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might have seen this picture of Browser evoution, but must have experienced their evolution along with the evolution of Web. They both are becoming stronger with each passing day, and are increasing the capabilities of the web based applications to perform better and deliver much more than what they were capable of before.&lt;/p&gt;

&lt;p&gt;With increased deliverables, comes increased complexities and the issues related to them. While browser vendors are doing their best to deliver the best performance from their side, it is also upon the developers to embrace the challenge of delivering the best customer experience, which can only be achieved with performant applications.&lt;/p&gt;

&lt;p&gt;PerfAudit is a step towards achieving this goal, by involving the experts and the business owners to find the keyholes hindering the performance of web applications. With every Performance Audit, we not only intend to help make a web application perform fast, but also add our findings to the pool of performance improvements that developers must add into their deployment routine to make evergreen performant applications.&lt;/p&gt;

&lt;p&gt;We believe in bringing stuff to the table than just plain words. Stay tuned with our social channels to learn, share and evolve.&lt;/p&gt;

&lt;p&gt;Before ending this post, just to give you food for thought, web has spread leaps and bounds beyond desktop, and web technologies are used for far more tasks than just representing a business.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Mar 2015 00:00:00 +0530</pubDate>
        <link>http://perfaudit.com/blog/we-are-on</link>
        <guid isPermaLink="true">http://perfaudit.com/blog/we-are-on</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Case Study | CanIUse.com | PerfAudit</title>
        <description>&lt;p&gt;Hello folks! This is Perfaudit’s first case study for which we chose &lt;a href=&quot;http://caniuse.com/&quot;&gt;caniuse.com&lt;/a&gt;. If you want to see us live auditing the website, checkout our video:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/VyHKIMORH_k&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;network-profiling&quot;&gt;Network profiling&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/caniuse-pagespeed.png&quot; alt=&quot;Google pagespeed issues&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we see, caniuse.com has a google pagespeed score of 84 which is pretty descent. There are few issues pointed out by pagespeed which are mainly due to 3rd party files not leveraging browser caching or coming unminified and uncompressed. These are mostly harmless but still can be fixed by caching these external files on the website itself so as to get full control over them.&lt;/p&gt;

&lt;h2 id=&quot;after-load-profiling&quot;&gt;After load profiling&lt;/h2&gt;

&lt;h3 id=&quot;issue-janky-scrolling&quot;&gt;Issue: Janky scrolling&lt;/h3&gt;

&lt;p&gt;On caniuse.com homepage, if you scroll down the page hovering over the list of links, you will experience occasional jerks. That is what we call a “Jank”. Lets try debugging the issue using Google Chrome’s devtool timeline. Running a quick timeline recording, we get the
following graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/caniuse-paint-janks.png&quot; alt=&quot;Paint janks&quot; class=&quot;full-width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This shows that we are shooting our limit due to some paint events. Paint events happen when something needs to be drawn on the page. This means when we are scrolling while hovering over the list, something is being drawn. Yes, its those links changing their color when hovered on. If you were to inspect one of those links and enable the &lt;code&gt;:hover&lt;/code&gt; pseudo class on them, you’ll see the culprit style:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/caniuse-jank-causing-css.png&quot; alt=&quot;Jank causing CSS&quot; class=&quot;full-width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you disable the &lt;code&gt;color&lt;/code&gt; property on &lt;code&gt;:hover&lt;/code&gt; and rerun a timeline recording, you’ll notice that there are no more paint events crossing the 60fps bar. Better performance.&lt;/p&gt;

&lt;p&gt;To solve this, there is a &lt;a href=&quot;http://www.thecssninja.com/css/pointer-events-60fps&quot;&gt;neat trick&lt;/a&gt; by Ryan Seddon to listen for scroll event and disable pointer events on an element, say &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, so that mouse dependent paints do not happen:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
// JS
var timeout, pointerEventsDisabled;
window.addEventListener(&#39;scroll&#39;, function () {
	clearTimeout(timeout);
	if (!pointerEventsDisabled) {
		document.body.classList.add(&#39;no-pointer-events&#39;);
		pointerEventsDisabled = true;
	}
	timeout = setTimeout(function () {
		document.body.classList.remove(&#39;no-pointer-events&#39;);
		pointerEventsDisabled = false;
	}, 500);
})
&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
// CSS
.no-pointer-events,
.no-pointer-events * {
	pointer-events: none !important;
}
&lt;/pre&gt;

&lt;p&gt;This will essentially disable the pointer events as soon as the scroll starts and enable them half a second after the last scroll event fires.&lt;/p&gt;

&lt;p&gt;There is a similar issue on their results page too. If you search something, say &lt;code&gt;transform&lt;/code&gt;, and scroll the shown &lt;a href=&quot;http://caniuse.com/#search=transform&quot;&gt;results page&lt;/a&gt; you will notice frequent janks. Lets run a recording in devtools timeline for this page. This is what we got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/03/caniuse-result-page-timeline.png&quot; alt=&quot;Result page timeline&quot; class=&quot;full-width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice those green coloured outburst at regular intervals. Those are heavy paint events causing the visible Jank! Again, if you were to use the above mentioned technique you would get a much smoother experience during the scroll.&lt;/p&gt;

&lt;p&gt;That is it for this audit. If you want us to audit any specific website, do let us know in the comments or on &lt;a href=&quot;https://twitter.com/perfaudit&quot;&gt;twitter&lt;/a&gt;. We’ll definitely try to take it up as our next case study.&lt;/p&gt;

&lt;p&gt;Do not forget to follow us for more such perfy performace audits.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Feb 2015 07:25:40 +0530</pubDate>
        <link>http://perfaudit.com/case-study/caniuse.com</link>
        <guid isPermaLink="true">http://perfaudit.com/case-study/caniuse.com</guid>
        
        
        <category>case-study</category>
        
      </item>
    
  </channel>
</rss>
